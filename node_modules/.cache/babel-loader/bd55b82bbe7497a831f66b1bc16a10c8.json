{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\project \\uD569\\uCE58\\uAE30\\\\aone\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './client/Root';\nimport './index.css';\nReactDOM.render( /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nconst express = require('express');\n\nconst path = require('path');\n\nconst ejs = require('ejs');\n\nconst sqlite3 = require('sqlite3').verbose();\n\nconst db_name = path.join(__dirname, 'data', 'apptest.db');\nconst db = new sqlite3.Database(db_name, err => {\n  if (err) {\n    return console.error(err.message);\n  }\n\n  console.log(\"Successful connection to the database 'apptest.db'\");\n});\nconst sql_create = `CREATE TABLE IF NOT EXISTS Books (\n  Book_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n  Title VARCHAR(100) NOT NULL,\n  Author VARCHAR(100) NOT NULL, \n  DateTime real,\n  Comments TEXT\n);`; // db.run : 첫번째 파라미터로 넘어온 sql query 실행, 그리고 두번째 파라미터인 callback함수 실행함\n\ndb.run(sql_create, err => {\n  if (err) {\n    return console.error(err.message);\n  }\n\n  console.log(\"Successful creation of the 'Book' table\");\n}); // Creating the Express server\n\nconst app = express(); // Server configuration\n\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.urlencoded({\n  extended: false\n})); // <--- middleware configuration\n// Starting the server\n\napp.listen(80, () => {\n  console.log('Server started (http://localhost:80/) !');\n}); // GET /\n\napp.get('/', (req, res) => {\n  // res.send(\"Hello world...\");\n  res.render('index');\n}); // GET /about\n\napp.get('/about', (req, res) => {\n  res.render('about');\n}); // GET /data\n\napp.get('/data', (req, res) => {\n  const test = {\n    titre: 'Test',\n    items: ['one', 'two', 'three']\n  };\n  res.render('data', {\n    model: test\n  });\n});\napp.get('/books', (req, res) => {\n  const sql = 'SELECT row_number() over (order by Book_id) as idx, * FROM Books ORDER BY Book_ID DESC';\n  db.all(sql, [], (err, rows) => {\n    if (err) {\n      return console.error(err.message);\n    }\n\n    res.render('books', {\n      model: rows\n    });\n  });\n}); // GET /edit\n\napp.get('/edit/:id', (req, res) => {\n  const id = req.params.id;\n  const sql = 'SELECT * FROM Books WHERE Book_ID = ?';\n  db.get(sql, id, (err, row) => {\n    // if (err) ...\n    res.render('edit', {\n      model: row\n    });\n  });\n}); // Request.body에서 posted value를 받기 위해서는 middleware인 express.urlencoded()를 사용해야 한다.\n// app.use()를 통해 수행할 수 있다.\n\napp.post('/edit/:id', (req, res) => {\n  const id = req.params.id;\n  const book = [req.body.Title, req.body.Author, req.body.Comments, id];\n  const sql = 'UPDATE Books SET Title=?, Author=?, Comments=? WHERE (Book_ID = ?)';\n  db.run(sql, book, err => {\n    if (err) {\n      console.error(err.message);\n    }\n\n    res.redirect('/books');\n  });\n}); // GET /create\n\napp.get('/create', (req, res) => {\n  const book = {\n    Author: ' '\n  };\n  res.render('create', {\n    model: book\n  });\n}); // POST /create\n\napp.post('/create', (req, res) => {\n  const sql = \"INSERT INTO Books (Title, Author, Comments, DateTime) SELECT ?, ?, ?, date('now')\";\n  const book = [req.body.Title, req.body.Author, req.body.Comments];\n  db.run(sql, book, err => {\n    // if (err) ...\n    res.redirect('/books');\n  });\n}); //GET //delete\n\napp.get('/delete/:id', (req, res) => {\n  const id = req.params.id;\n  const sql = 'SELECT * FROM Books WHERE Book_ID=?';\n  db.get(sql, id, (err, row) => {\n    if (err) {\n      console.error(err.message);\n    }\n\n    res.render('delete', {\n      model: row\n    });\n  });\n}); //POST //delete\n\napp.post('/delete/:id', (req, res) => {\n  const id = req.params.id;\n  const sql = 'DELETE FROM Books WHERE Book_ID=?';\n  db.run(sql, id, err => {\n    if (err) {\n      console.error(err.message);\n    }\n\n    res.redirect('/books');\n  });\n}); //more\n\napp.get('/more/:id', (req, res) => {\n  const id = req.params.id;\n  const sql = 'SELECT * FROM Books WHERE Book_ID=?';\n  db.get(sql, id, (err, row) => {\n    if (err) {\n      console.error(err.message);\n    }\n\n    res.render('more', {\n      model: row\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/hp/Desktop/project 합치기/aone/src/index.js"],"names":["React","ReactDOM","Root","render","document","getElementById","express","require","path","ejs","sqlite3","verbose","db_name","join","__dirname","db","Database","err","console","error","message","log","sql_create","run","app","set","use","static","urlencoded","extended","listen","get","req","res","test","titre","items","model","sql","all","rows","id","params","row","post","book","body","Title","Author","Comments","redirect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './client/Root';\n\nimport './index.css';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\nconst express = require('express');\nconst path = require('path');\nconst ejs = require('ejs');\nconst sqlite3 = require('sqlite3').verbose();\n\nconst db_name = path.join(__dirname, 'data', 'apptest.db');\nconst db = new sqlite3.Database(db_name, (err) => {\n  if (err) {\n    return console.error(err.message);\n  }\n  console.log(\"Successful connection to the database 'apptest.db'\");\n});\n\nconst sql_create = `CREATE TABLE IF NOT EXISTS Books (\n  Book_ID INTEGER PRIMARY KEY AUTOINCREMENT,\n  Title VARCHAR(100) NOT NULL,\n  Author VARCHAR(100) NOT NULL, \n  DateTime real,\n  Comments TEXT\n);`;\n\n// db.run : 첫번째 파라미터로 넘어온 sql query 실행, 그리고 두번째 파라미터인 callback함수 실행함\ndb.run(sql_create, (err) => {\n  if (err) {\n    return console.error(err.message);\n  }\n  console.log(\"Successful creation of the 'Book' table\");\n});\n\n// Creating the Express server\nconst app = express();\n\n// Server configuration\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, 'views'));\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.urlencoded({ extended: false })); // <--- middleware configuration\n// Starting the server\napp.listen(80, () => {\n  console.log('Server started (http://localhost:80/) !');\n});\n\n// GET /\napp.get('/', (req, res) => {\n  // res.send(\"Hello world...\");\n  res.render('index');\n});\n\n// GET /about\napp.get('/about', (req, res) => {\n  res.render('about');\n});\n\n// GET /data\napp.get('/data', (req, res) => {\n  const test = {\n    titre: 'Test',\n    items: ['one', 'two', 'three'],\n  };\n  res.render('data', { model: test });\n});\n\napp.get('/books', (req, res) => {\n  const sql =\n    'SELECT row_number() over (order by Book_id) as idx, * FROM Books ORDER BY Book_ID DESC';\n\n  db.all(sql, [], (err, rows) => {\n    if (err) {\n      return console.error(err.message);\n    }\n    res.render('books', { model: rows });\n  });\n});\n\n// GET /edit\napp.get('/edit/:id', (req, res) => {\n  const id = req.params.id;\n  const sql = 'SELECT * FROM Books WHERE Book_ID = ?';\n  db.get(sql, id, (err, row) => {\n    // if (err) ...\n    res.render('edit', { model: row });\n  });\n});\n\n// Request.body에서 posted value를 받기 위해서는 middleware인 express.urlencoded()를 사용해야 한다.\n// app.use()를 통해 수행할 수 있다.\napp.post('/edit/:id', (req, res) => {\n  const id = req.params.id;\n  const book = [req.body.Title, req.body.Author, req.body.Comments, id];\n  const sql =\n    'UPDATE Books SET Title=?, Author=?, Comments=? WHERE (Book_ID = ?)';\n  db.run(sql, book, (err) => {\n    if (err) {\n      console.error(err.message);\n    }\n    res.redirect('/books');\n  });\n});\n\n// GET /create\napp.get('/create', (req, res) => {\n  const book = {\n    Author: ' ',\n  };\n  res.render('create', { model: book });\n});\n\n// POST /create\napp.post('/create', (req, res) => {\n  const sql =\n    \"INSERT INTO Books (Title, Author, Comments, DateTime) SELECT ?, ?, ?, date('now')\";\n  const book = [req.body.Title, req.body.Author, req.body.Comments];\n  db.run(sql, book, (err) => {\n    // if (err) ...\n    res.redirect('/books');\n  });\n});\n\n//GET //delete\napp.get('/delete/:id', (req, res) => {\n  const id = req.params.id;\n  const sql = 'SELECT * FROM Books WHERE Book_ID=?';\n  db.get(sql, id, (err, row) => {\n    if (err) {\n      console.error(err.message);\n    }\n    res.render('delete', { model: row });\n  });\n});\n//POST //delete\napp.post('/delete/:id', (req, res) => {\n  const id = req.params.id;\n  const sql = 'DELETE FROM Books WHERE Book_ID=?';\n  db.run(sql, id, (err) => {\n    if (err) {\n      console.error(err.message);\n    }\n    res.redirect('/books');\n  });\n});\n\n//more\napp.get('/more/:id', (req, res) => {\n  const id = req.params.id;\n  const sql = 'SELECT * FROM Books WHERE Book_ID=?';\n  db.get(sql, id, (err, row) => {\n    if (err) {\n      console.error(err.message);\n    }\n    res.render('more', { model: row });\n  });\n});\n"]},"metadata":{},"sourceType":"module"}